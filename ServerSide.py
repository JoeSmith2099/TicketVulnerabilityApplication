import socket
import time
from User import *
from Event import *
"""Server Side Python

This program...

@authors:
    *Conner Moeck
    *Noah Neundorfer
    *Joseph Smith

@Date: 
    *Work began - October 15, 2021
    *Work ended - November 19, 2021

This file contains the following functions:

    * listEvents - returns a 
    * main - the main function of the script
"""

"""Command to purchase tickets

@parameters:
    *s - string that has event name to purchase ticket from
"""
def purchaseTickets(s):
    global LoggedInUser
    if(LoggedInUser != None):                                              #if user logged in
        if s in eventList:                                                 #if event name is in eventlist
            purchaseResult = LoggedInUser.purchaseTickets(eventList[s])    #Pass event object to user.purchasetickets()
            if(purchaseResult[0]):                                         #user.purchaseTickets returns tuple, with first value being boolean of succuss/failure
                sendToClient("Purchase of ticket for "+s+" was a success")
            else:
                sendToClient("Could not purchase ticket:"+ purchaseResult[1])
        else:
            sendToClient("Event not found")
    else:
        sendToClient("Please Log in to purchase ticket to an event")

    endSendStream()                                                         #end data tranmission


"""Command to list all Events

@parameters:
    *s - Should always be empty string
"""
def listEvents(s = ""):
    sendString = ""
    for event in eventList.values():                        #Sends a toString() of every event
        sendString += event.toString()
    sendToClient(sendString)
    endSendStream()                                         #end data tranmission


def login(s):
    global LoggedInUser                                     #Must declare global since using global variable
    info = s.split(":")
    if info[0] in userList:                                 #If user exists in userList
        if(userList[info[0]].comparePasswords(info[1])):    #If passwords match
            LoggedInUser = userList[info[0]]                #Change logged in user
            sendToClient("Logged in as " + LoggedInUser.toString())
        else:
            sendToClient("Incorrect Password")
    else:
        sendToClient("Could not find user:" + info[0])
  
    endSendStream()                                         #end data tranmission

"""Command to add an account to program

@parameters:
    *s - string containing the username, and passwd/passwd confirmation in format:
            username:passwd:passwdConfirmation
"""
def registerAccount(s):
    info = s.split(":")                                             #":" is used to seperate data in string s
        
    if(info[0] in userList):                                        #If user is not already in userList
        sendToClient("That username is taken, please try again")
    else:
        if(info[1] == info[2]):                                     #If password hashes match
            userList[info[0]] = User(info[0],info[1])               #Create new user with username and password

        else:
            sendToClient("Passwords Do not match")                  #if passwords don't match, let client know

    endSendStream()                                                 #end data tranmission


def purchasePoints(s):
    global LoggedInUser
    try:
        s = int(s)                                                  #Check if number of tickets is an int
        if(LoggedInUser != None):                                   #If user logged in
            if (s != 0):                                            #Check that valid number of points to purchase
                LoggedInUser.addPoints(s);                          #add points to user
            else:
                sendToClient("Enter a valid number of points to purchase")
        else:
            sendToClient("Please Log in to purchase points")        #If user is not logged in, let them know

    except:
        sendToClient("Please enter a number for points")            #let user know you must enter a number for poi
   
    endSendStream()                                                 #end data tranmission


"""A method sends the lcient info about the currently logged in account

@parameters:
        *s - empty string
"""
def accountInfo(s = ""):
    global LoggedInUser
    if(LoggedInUser != None):                               #If user is logged in
        sendToClient(LoggedInUser.toString())               #Send data about current user
    else:
        sendToClient("Login to view account information")   #If user is not logged in, let them know
    endSendStream()                                         #end data tranmission


"""A method that logs out the current user

@parameters:
        *s - empty string
"""
def logout(s = ""):
    global LoggedInUser
    if(LoggedInUser != None):                                               #If user is logged in
        sendToClient("Logged out of User: "+ LoggedInUser.getUsername())    #Send logout message
        LoggedInUser = None                                                 #logout user
    else:
        sendToClient("You Must Login to Logout")                            #If user isn't logged in, let them know
    endSendStream()                                                         #end data tranmission


"""A method that recieves input from the client, and sends the data to the correct 

@parameters:
        *s - A string that contains the requested command and relevant data, in format:
            commandName:data
"""
def receiveInput(s):
    info = s.split(":", 1)              #Splits into two items, commandName, and then data
                                        #if relevant data, it will be sent to function, otherwise it is discarded
    if(info[0] == "purchaseTickets") :
        purchaseTickets(info[1])
    elif(info[0] == "listEvents"):
        listEvents()
    elif(info[0] == "login"):
        login(info[1])
    elif(info[0] == "registerAccount"):
        registerAccount(info[1])
    elif(info[0] == "purchasePoints") :
        purchasePoints(info[1])
    
    elif(info[0] == "accountInfo"):
        accountInfo()
    elif(info[0] == "logout"):
        logout()
    else:
        sendToClient("Unknown Command: How did you do that?")
        endSendStream()



"""method that sends data to client

@parameters:
    *s - string of data to send
"""
def sendToClient(s):
    try:
        conn.send(s.encode())           #Encodes string to binary to send to client
    except:
        print("Could not send data to client")


"""Method tells client to stop waiting for data, should always be sent at end of command execution

"""
def endSendStream():
    global conn
    conn.send("ENDDATA".encode())       #when an "ENDDATA" message is recieved at the client, it knows to stop listening for more data


"""Method reads data from Events.txt and Users.txt and instatntiates each as an Event or User respectively

"""
def SetupData():

    print("Beggining Data Set Up...", end = "")
    global userList
    global eventList
    EventsFile = open("Events.txt", "r")
    UserFile = open("Users.txt", "r")    


    event = EventsFile.readline()
    while (event != ""):                #until end of file
        event = event.strip()           #remove whitespace and newline
        if(event != ""):
            EventData = event.split("___")                      
            eventList[EventData[0]] = Event(EventData[0])
            for dataPiece in EventData:                         #Data piece is a piece of data; points, passwd, etc...
                if("description" in dataPiece):
                    dataPiece = dataPiece.replace("description:", "", 1)
                    eventList[EventData[0]].setDescription(dataPiece)
                elif("ticketCost" in dataPiece):
                    dataPiece = dataPiece.replace("ticketCost:", "", 1)
                    eventList[EventData[0]].setTicketCost(dataPiece)
                elif("ticketCount" in dataPiece):
                    dataPiece = dataPiece.replace("ticketCount:", "", 1)
                    eventList[EventData[0]].setTicketCount(dataPiece)
        event = EventsFile.readline()


    user = UserFile.readline()
    while(user != ""):                  #until end of file   
        user = user.strip()             #remove whitespace and newline
        if(user != ""):
            UserData = user.split("___")                        #We use "___" to seperate pices of data, and ":" to serpate data identifier and value
            userList[UserData[0]] = User(UserData[0])
            for dataPiece in UserData:                          #Data piece is a piece of data; ticketCost, eventName, etc...
                if("pointsCount" in dataPiece):
                    dataPiece = dataPiece.replace("pointsCount:", "", 1)
                    userList[UserData[0]].setPointsCount(dataPiece)
                elif("password" in dataPiece):
                    dataPiece = dataPiece.replace("password:", "", 1)
                    userList[UserData[0]].setPassword(dataPiece)
                elif("event" in dataPiece):
                    dataPiece = dataPiece.replace("event:", "", 1)
                    userList[UserData[0]].addEvent(eventList[dataPiece])
        user = UserFile.readline() 

    UserFile.close()
    EventsFile.close()
    print("   ...Data Set Up")
    
"""Method writes data of currently instantiated Events and Users to Event.txt and Users.txt respectively

"""
def WriteDataToFiles():
    print("Beggining Data writing...", end = "")
    UserFile = open("./Users.txt", "w")                     #File contains user/userinfo
    EventsFile = open("./Events.txt", "w")                  #file contains event/eventinfo

    for user in userList.values() :                         #for every user
        writeString = user.getUsername()
        writeString += "___pointsCount:"+str(user.getPointsCount())
        writeString += "___password:"+user.getPassword()
        for event in user.getEvents():
            writeString += "___event:"+event.getEventName()
        UserFile.write(writeString.strip() + "\n")


    for event in eventList.values() :                      #for every event
        writeString = event.getEventName()
        writeString += "___description:"+event.getDescription()
        writeString += "___ticketCost:"+str(event.getTicketCost())
        writeString += "___ticketCount:"+str(event.getTicketCount())
        EventsFile.write(writeString.strip()+"\n")


    UserFile.close()
    EventsFile.close()
    print("   ...Data Written")


"""Main function, runs a loop until the client closes the connection, and then continues if not told to quit

"""
def main():
    global conn                     #conn is used gloabbly
    SetupData()
    continueProgram = True          #boolean for main loop
    while continueProgram:
        print("Ready for connection")
        server_s.listen(5)                  #listens for connection requests
        conn, addr = server_s.accept()      #connects when reiceved connection
        print("connection Established\n")
        try:                                #try loop watches for errors
            data = (conn.recv(4096)).decode()   #Data is sent in binary, and must be decoded to a string

            while data != "":                   #Main loop, if we attempt to recieve data from a closed connection, it returns ""
                receiveInput(data)              #sends data to method that picks appropriate method
                data = conn.recv(4096).decode()
        except Exception as e:                  #if we recieve an error
            print("ERROR: ", end = "")
            print(e)
        finally:
            conn.close()                        #We always close connection to client
            WriteDataToFiles()                  #After every connection, we write data to files
                                                    #this means data is always current, even if server crashes/behaves unexpectadely

        print("Continue server? (exit to exit) ")
        if(str(input()).lower() == "exit"):     #whenever connection ends, the server can be closed, other waits for next connection
            continueProgram = False
        

    server_s.close()


userList = {}                   #userList stores instantiated list of users
eventList = {}                  #eventList stores instantiated list of events
LoggedInUser = None             #Points at currenlty logged in user
HOST = '127.0.0.1'              #Loopback interface, runs on single system
PORT = 35502                    #port used to connect to server
server_s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_s.bind((HOST, PORT))     #binds server to port/ip

main()