"""user Class Python

This program...

@authors:
    *Conner Moeck
    *Noah Neundorfer
    *Joseph Smith

@Date: 
    *Work began - October 15, 2021
    *Work ended - November 19, 2021

This file contains the following functions:
    * __init__ - returns a 
    * toString - returns a string
"""
class User:
    username = ""
    password = ""
    points = 0  # Points are a 10 to ratio
    events = []


    """Initilizer of User class

    @parameters:
        *initUsername - the userName of the user. Default: genericUser
        *initPassword - Hashed value of the user's password. Default: ""
        *initPoints - the user's points values. Default: 5000
    """
    def __init__(self, initUsername = "genericUser", initPassword = "", initPoints = 5000):
        self.username = initUsername
        self.password = initPassword
        self.points = int(initPoints)
        self.events = []
        


    """Command to purchase a ticket from an event

    @parameters:
        *event - an object of type event, to purchase ticket from

    @returns:
        *tuple - first value of tuple is status of event:
                    True for susseful purcahs
                    False for failed purchase
                 Second value of tuple is comment for failure reason
                    "No Event Tickets Left", etc...
    """
    def purchaseTickets(self, event):
        returnTuple = ()
        if (int(self.points) >= int(event.TicketCost)):                         #if we have enough points to purchase tciket
            if (event.CheckTicketAvailibility()):                               #Checks if ticket available at event
                self.points= int(self.points) - int(event.getTicketCost())      #Subtracts points from user
                event.purchaseTicket()                                          #Remove ticket from Event
                self.events.append(event)                                       #Add event to ticket list
                
                returnTuple = (True, "")
            else:
                returnTuple = (False, "No Event Tickets Left")
            
        else:
            returnTuple = (False, "Not enough points")

        return returnTuple                                                      #Return Tuple


    """Command to get string describing user

    @returns:
        *string - containing details, username, points, tickets to events.
    """
    def toString(self):
        returnString = self.username
        returnString += "\n Points: " + str(self.points)
        for event in self.events:
            returnString += "\n Ticket to: " + event.getEventName()

        return returnString                 #Return string

    def getUsername(self):
        return self.username

    def setUsername(self, s):
        self.username = s

    """Command to add and account to program

    @parameters:
        *passwd - a password entered from client

    @returns:
        *boolean - true if passwd matches this user's password
                    False otherwise
    """
    def comparePasswords(self, passwd):
        if ((self.password).strip() == passwd.strip()):
            return True
        else:
            return False

    def getPassword(self):
        return self.password

    def setPassword(self, s):
        self.password = s

    def getPointsCount(self):
        return self.points

    def setPointsCount(self, s):
        self.points = (s)

    def addPoints(self, s):
        self.points = int(self.points) + int(s)

    def addEvent(self, event):
        self.events.append(event)

    def getEvents(self):
        return self.events